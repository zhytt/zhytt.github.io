<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>二分</title>
      <link href="/2021/10/10/%E4%BA%8C%E5%88%86/"/>
      <url>/2021/10/10/%E4%BA%8C%E5%88%86/</url>
      
        <content type="html"><![CDATA[<h4 id="第一题"><a href="#第一题" class="headerlink" title="第一题"></a>第一题</h4><p> <strong>Acwing 789. 数的范围（详细分析二分过程）</strong> <a href="https://www.acwing.com/problem/content/description/791/">原题链接</a></p><p>给定一个按照升序排列的长度为 n 的整数数组，以及 q 个查询。</p><p>对于每个查询，返回一个元素 kk 的起始位置和终止位置（位置从 00 开始计数）。</p><p>如果数组中不存在该元素，则返回 <code>-1 -1</code>。</p><h4 id="输入格式"><a href="#输入格式" class="headerlink" title="输入格式"></a>输入格式</h4><p>第一行包含整数 n 和 q，表示数组长度和询问个数。</p><p>第二行包含 n 个整数（均在 1∼100001∼10000 范围内），表示完整数组。</p><p>接下来 q 行，每行包含一个整数 kk，表示一个询问元素。</p><h4 id="输出格式"><a href="#输出格式" class="headerlink" title="输出格式"></a>输出格式</h4><p>共 q行，每行包含两个整数，表示所求元素的起始位置和终止位置。</p><p>如果数组中不存在该元素，则返回 <code>-1 -1</code>。</p><h4 id="数据范围"><a href="#数据范围" class="headerlink" title="数据范围"></a>数据范围</h4><p>1≤n≤1000001≤n≤100000<br>1≤q≤100001≤q≤10000<br>1≤k≤10000</p><p>输入样例:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">6 3</span><br><span class="line">1 2 2 3 3 4</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td></tr></table></figure><p>输入样例:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">3 4</span><br><span class="line">5 5</span><br><span class="line">-1 -1</span><br></pre></td></tr></table></figure><h4 id="解析："><a href="#解析：" class="headerlink" title="解析："></a>解析：</h4><p>本题是练习二分很好的一道题目，二分程序虽然简单，但是如果写之前不考虑好想要查找的是什么，十有八九会是死循环或者查找错误，就算侥幸写对了也只是运气好而已。用二分去查找元素要求数组的有序性或者拥有类似于有序的性质，对本题而言，一个包含重复元素的有序序列，要求输出某元素出现的起始位置和终止位置，翻译一下就是：在数组中查找某元素，找不到就输出-1，找到了就输出不小于该元素的最小位置和不大于该元素的最大位置。所以，需要写两个二分，一个需要找到&gt;=x的第一个数，另一个需要找到&lt;=x的最后一个数。查找不小于x的第一个位置，较为简单：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">int l = 0, r = n - 1;</span><br><span class="line">while (l &lt; r) &#123;</span><br><span class="line">    int mid = l + r &gt;&gt; 1;</span><br><span class="line">    if (a[mid] &lt; x)  l = mid + 1;</span><br><span class="line">    else    r = mid;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>当a[mid]小于x时，令l = mid + 1，mid及其左边的位置被排除了，可能出现解的位置是mid + 1及其后面的位置；当a[mid] &gt;= x时，说明mid及其左边可能含有值为x的元素；当查找结束时，l与r相遇，l所在元素若是x则一定是x出现最小位置，因为l左边的元素必然都小于x。查找不大于x的最后一个位置，便不容易了：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">int l1 = l, r1 = n;</span><br><span class="line">while (l1 + 1 &lt; r1) &#123;</span><br><span class="line">    int mid = l1 + r1 &gt;&gt; 1;</span><br><span class="line">    if (a[mid] &lt;= x)  l1 = mid;</span><br><span class="line">    else    r1 = mid;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>要查找不大于x的最后一个位置，当a[mid] &lt;= x时，待查找元素只可能在mid及其后面，所以l = mid；当a[mid] &gt; x时，待查找元素只会在mid左边，令r = mid。<br>为什么不令r = mid - 1呢？因为如果按照上一个二分的写法，循环判断条件还是l &lt; r,当只有两个元素比如2 2时，l指向第一个元素，r指向第二个元素，mid指向第一个元素，a[mid] &lt;= x，l = mid还是指向第一个元素，指针不移动了，陷入死循环了，此刻l + 1 == r，未能退出循环。<br>那么直接把循环判断条件改成l + 1 &lt; r呢？此时一旦只有两个元素，l和r差1，循环便不再执行，查找错误。<br>所以这里出现了二分的典型错误，l == r作为循环终止条件，会出现死循环，l + 1 == r作为循环终止条件，会出现查找错误。<br>问题如何解决，一种方法就是将查找的区间设置为左闭右开，比如待查找元素在[0,n - 1]范围内，可以写成[0,n)，令r = n，这时候只有两个元素时，r是取最右边元素的后一个位置的，l和r相差2，还会执行循环。<br>现在再来理解上一段的r1 = mid，说明a[mid] &gt; x时，r = mid就表示待查找元素会是在r的左边，因为r是开区间。上面这种写法修改了循环条件使得二分不会死循环，修改了区间的开闭性使得不会查找错误。另一种解决办法就是：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">int l = 0, r = n - 1;</span><br><span class="line">while (l &lt; r)</span><br><span class="line"> &#123;</span><br><span class="line">        int mid = l + r + 1 &gt;&gt; 1;</span><br><span class="line">        if (a[mid] &lt;= x) l = mid;</span><br><span class="line">        else r = mid - 1;</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><p>不修改循环终止条件，想办法解决死循环的问题，首先想下为什么查找不小于x的第一个位置不会死循环？因为这时就算只有两个元素，l + 1 = r,mid = l,a[mid]小于x时l是会+1的，不小于x时r = mid也会缩小区间。<br>而查找不大于x的最后一个位置之所以会死循环是因为编程语言里面除以2的下取整性，试想下如果l + 1 = r时，mid = （l + r） / 2 = l，一旦a[mid] &lt;= x,l = mid = l，区间并没有缩小，从而陷入死循环；如果一开始取mid为r，一旦a[mid] &lt;= x,l = mid = r,区间缩小，否则r = mid - 1 = l区间缩小，l都会与r相遇，就不会陷入死循环了。<br>如何做到上取整呢？只需要取mid时在l + r后面再加1即可，这里l和r都是闭区间，所以当a[mid] &gt; x时，r = mid - 1.<br>是否还有其他办法既不修改区间的开闭性和循环终止条件，又不用上取整呢？答案是肯定的。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">nt l1 = l, r1 = n - 1;</span><br><span class="line">while (l1 &lt; r1) &#123;</span><br><span class="line">    int mid = l1 + r1 &gt;&gt; 1;</span><br><span class="line">    if (a[mid] &lt;= x)  l1 = mid + 1;</span><br><span class="line">    else    r1 = mid - 1;</span><br><span class="line">&#125;</span><br><span class="line">printf(&quot;%d %d\n&quot;, l, l1 - (a[l1] == x ? 0 : 1));</span><br></pre></td></tr></table></figure><p>我们之所以会进行第二轮查找不大于x的最后一个位置，是因为第一轮已经找到了一个等于x的位置。所以完全可以当a[mid] &lt;= x时，令l = mid + 1，此时，l指向的元素可能是x也可能比x大，但是由于不论大小，l和r的指针都移动了，就不会陷入死循环了，最后，如果a[l] == x则，l就是x出现的最后的位置，否则，l - 1就是x出现的最后一个位置。或许有人会疑惑，当a[mid] &lt;= x时，l已经右移，最后l不是肯定指向的是大于x的位置嘛，为什么也可能指向等于x的位置？这是因为一旦第一轮查找的x出现的位置就是x唯一出现的位置，当x出现在数组末尾时，l == r，循环不会执行，此刻l指向的还是x，所以加上这个判断就可以解决该问题了。这也是二分程序可能遇见的第三种问题，当左右指针都移动时，待查找元素处在元素末尾会引起查找错误。总的代码如下：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">100010</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> q[N];</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n,m;</span><br><span class="line">    cin&gt;&gt;n&gt;&gt;m;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;i++) <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;q[i]);</span><br><span class="line">    <span class="keyword">while</span>(m--)&#123;</span><br><span class="line">        <span class="keyword">int</span> x;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;x);</span><br><span class="line">        <span class="keyword">int</span> l=<span class="number">0</span>,r=n <span class="number">-1</span>;</span><br><span class="line">        <span class="keyword">while</span>(l&lt;r)&#123; <span class="comment">//从左边出发找第一个等于x的位置</span></span><br><span class="line">            <span class="keyword">int</span> mid=l+r&gt;&gt;<span class="number">1</span>;</span><br><span class="line">            <span class="keyword">if</span>(q[mid]&gt;=x) r=mid;</span><br><span class="line">            <span class="keyword">else</span> l=mid+<span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(q[l]!=x) cout&lt;&lt;<span class="string">&quot;-1 -1&quot;</span>&lt;&lt;endl;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            cout&lt;&lt;l&lt;&lt;<span class="string">&quot; &quot;</span>;</span><br><span class="line">            <span class="keyword">int</span> l=<span class="number">0</span>,r=n<span class="number">-1</span>;</span><br><span class="line">            <span class="keyword">while</span>(l&lt;r)&#123;<span class="comment">//如果首位置能找，继续找末位置</span></span><br><span class="line">                <span class="keyword">int</span> mid=l+r+<span class="number">1</span>&gt;&gt;<span class="number">1</span>;<span class="comment">//加1为了防止当r=l+1时死循环</span></span><br><span class="line">                <span class="keyword">if</span>(q[mid]&lt;=x) l=mid;</span><br><span class="line">                <span class="keyword">else</span> r=mid<span class="number">-1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        cout&lt;&lt;l&lt;&lt;endl;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>转载于：<a href="https://blog.csdn.net/qq_30277239">昂昂累世士的博客</a></p><h4 id="第二题"><a href="#第二题" class="headerlink" title="第二题"></a>第二题</h4>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 二分 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="/2021/07/16/hello-world/"/>
      <url>/2021/07/16/hello-world/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
      
      
      <categories>
          
          <category> web前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> jQuery </tag>
            
            <tag> 表格 </tag>
            
            <tag> 表单验证 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
